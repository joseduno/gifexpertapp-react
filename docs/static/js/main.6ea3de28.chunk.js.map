{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","placeholder","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"4LAqCeA,EAlCK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAECC,mBAAS,IAFV,mBAE5BC,EAF4B,KAEhBC,EAFgB,KAiBnC,OACI,sBAAMC,SAdW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAI3BR,EAAYE,GACZC,EAAc,MAMlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAnBW,SAAAN,GAAC,OAAIF,EAAcE,EAAEO,OAAOF,QAoBvCG,YAAY,c,OCfbC,EATK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACzB,OACI,sBAAKC,UAAU,0CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCgBDK,EAtBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,sEAGO,mCAETN,EALE,uDAGO,mCAHP,cAKgEO,UAAUF,GAL1E,UAK6F,IAL7F,SAMWG,MAAMR,GANjB,cAMFS,EANE,gBAOaA,EAAKC,OAPlB,uBAODC,EAPC,EAODA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAZlC,kBAeDY,GAfC,kCAiBRM,QAAQC,IAAR,MAjBQ,0DAAH,sDCkBEC,EAdC,SAAC,GAAgB,IAAD,ECAJ,SAACf,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNU,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WAEND,EAAS,CAACZ,KAAM,GAAIU,SAAS,IAC7BjB,EAAQC,GAAUoB,MAAK,SAAAT,GACnBO,EAAS,CAACZ,KAAMK,EAAQK,SAAS,SAGtC,CAAChB,IAEGiB,EDdwBI,CAFH,EAAdrB,UAEFW,EAFgB,EAErBL,KAAaU,EAFQ,EAERA,QAEpB,OACI,sBAAKpB,UAAU,YAAf,UAGKoB,GAAW,mBAAGpB,UAAU,uCAAb,yBACXe,EAAOH,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,WEOtCY,EAhBM,WAAO,IAAD,EAES1C,mBAAS,aAFlB,mBAEhBoB,EAFgB,KAENrB,EAFM,KAIvB,OACI,qCACI,oBAAIiB,UAAU,2CAAd,0BACA,uBACA,uBACA,cAAC,EAAD,CAAajB,YAAaA,IAC1B,cAAC,EAAD,CAASqB,SAAUA,Q,MCT/BuB,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.6ea3de28.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategory}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleOnChange = e => setInputValue(e.target.value)\r\n    const handleSubmit = e => {\r\n        e.preventDefault()  // Evita que refresque la pagina al presionar enter\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            {/* No es necesario mandar las categorias como paramentro al componente, \r\n            en la funcion del hook (setCategories), por defecto se recibe como primer\r\n            parametro, el ultimo estado de las categorias */}\r\n            setCategory(inputValue)\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleOnChange}\r\n                placeholder='Buscar'\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired,  // Para obligar a recibir una funcion como argumento\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__flipInX'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","const getGifs = async(category) => {\r\n\r\n    try {\r\n        const apiKey = '2dHBJ2S3iltXsrTR2ofwoAohnhOpCNW7'\r\n        // encodeURI cambia espacios por guiones, %20 para poder usarlos en urls\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=${10}`\r\n        const resp = await fetch(url)\r\n        const {data} = await resp.json()\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\nexport default getGifs","import React from 'react'\r\nimport GifGridItem from './GifGridItem'\r\nimport {useFetchGifs} from '../hooks/useFetchGifts'\r\n\r\nconst GifGrid = ({category}) => {\r\n    \r\n    const {data:images, loading} = useFetchGifs(category)\r\n\r\n    return (\r\n        <div className='card-grid'>\r\n            {/* con {...img} pasamos cada propiedad y valor de la imagen como \r\n            argumentos individuales al componente GifGridItem */}\r\n            {loading && <p className='animate__animated animate__heartBeat'>Cargando...</p>}\r\n            {images.map(img => <GifGridItem key={img.id} {...img} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifs from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        setState({data: [], loading: true})\r\n        getGifs(category).then(images => {\r\n            setState({data: images, loading: false})\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    const [category, setCategory] = useState('King Kong')\r\n\r\n    return (\r\n        <>\r\n            <h2 className='animate__animated animate__fadeInDownBig'>GifExpertApp</h2>\r\n            <hr/>\r\n            <br />\r\n            <AddCategory setCategory={setCategory}/>\r\n            <GifGrid category={category} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp/>, document.getElementById('root'));\n"],"sourceRoot":""}